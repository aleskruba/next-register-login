// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Admin {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  f_name          String
  l_name          String
  email           String   @unique
  image           String?
  hashedPassword  String?
  role            String   @default("Admin")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

 @@map("admins") 
}


model Student {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  f_name          String
  l_name          String
  email           String   @unique
  image           String?
  hashedPassword  String?
  languages       String?     // New field
  role            String   @default("Student")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  classesIds String[] @db.ObjectId
  classes Class[] @relation("classCode", fields: [classesIds], references: [id])

  gradesIds String[] @db.ObjectId
  gradeses Grade[] @relation("Value", fields: [gradesIds], references: [id])

 @@map("students") 
}

model Teacher {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  f_name          String
  l_name          String
  email           String   @unique
  image           String?
  hashedPassword  String?
  languages       String?
  role            String   @default("Teacher")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  classesIds String[] @db.ObjectId
  classes Class[] @relation("classCode", fields: [classesIds], references: [id])

  gradesIds String[] @db.ObjectId
  gradeses Grade[] @relation("Value", fields: [gradesIds], references: [id])

 @@map("teachers") 
}

model Class {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  classCode String
  language  String
  schedule String

  studentClassesIds String[] @db.ObjectId
  studentClasses Student[] @relation("classCode", fields: [studentClassesIds], references: [id])

  teacherClassesIds String[] @db.ObjectId
  teacherClasses Teacher[] @relation("classCode", fields: [teacherClassesIds], references: [id])

 @@map("classes") 
}


model Grade {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  value     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  studentGradesIds String[] @db.ObjectId
  studentGrades Student[] @relation("Value", fields: [studentGradesIds], references: [id])

  teacherGradesIds String[] @db.ObjectId
  teacherGrades Teacher[] @relation("Value", fields: [studentGradesIds], references: [id])

 @@map("grades") 
}

