// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Admin {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  f_name          String
  l_name          String
  email           String   @unique
  image           String?
  hashedPassword  String?
  role            String   @default("Admin")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

 @@map("admins") 
}


model Student {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  f_name          String
  l_name          String
  email           String   @unique
  image           String?
  hashedPassword  String?
  languages       String?     // New field
  role            String   @default("Student")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  classesIds String[] @db.ObjectId
  classes Class[] @relation("classCode", fields: [classesIds], references: [id])

  gradesIds String[] @db.ObjectId
  gradeses Grade[] @relation("Value", fields: [gradesIds], references: [id])

 // seenMessagesIds String[] @db.ObjectId
 // seenMessages Message[] @relation("Message", fields: [seenMessagesIds], references: [id])

  posts Message[]

 @@map("students") 
}

model Teacher {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  f_name          String
  l_name          String
  email           String   @unique
  image           String?
  hashedPassword  String?
  languages       String?
  role            String   @default("Teacher")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  classesIds String[] @db.ObjectId
  classes Class[] @relation("classCode", fields: [classesIds], references: [id])

  gradesIds String[] @db.ObjectId
  gradeses Grade[] @relation("Value", fields: [gradesIds], references: [id])

  //seenMessagesIds String[] @db.ObjectId
 // seenMessages Message[] @relation("Message", fields: [seenMessagesIds], references: [id])

  posts Message[]


 @@map("teachers") 
}

model Class {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  classCode String
  language  String
  schedule String
  

  studentClassesIds String[] @db.ObjectId
  studentClasses Student[] @relation("classCode", fields: [studentClassesIds], references: [id])

  teacherClassesIds String[] @db.ObjectId
  teacherClasses Teacher[] @relation("classCode", fields: [teacherClassesIds], references: [id])

  posts Message[]

 @@map("classes") 
}


model Grade {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  comment          String?
  value            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

 

  studentGradesIds String[] @db.ObjectId
  studentGrades Student[] @relation("Value", fields: [studentGradesIds], references: [id])

  teacherGradesIds String[] @db.ObjectId
  teacherGrades Teacher[] @relation("Value", fields: [studentGradesIds], references: [id])

 @@map("grades") 
}

model Message {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  message          String?
  role             String?
  createdAt        DateTime    @default(now())

  //seenByStudentsIds String[] @db.ObjectId
  //seenByStudents   Student[]   @relation("Message",fields: [seenByStudentsIds], references: [id])
  
 // seenByTeachersIds String[] @db.ObjectId
  //seenByTeachers   Teacher[]   @relation("Message",fields: [seenByTeachersIds], references: [id])


  classCode             Class?     @relation(fields: [classCodesIds], references: [id])
  classCodesIds         String?    @db.ObjectId

  authorStudent         Student?   @relation(fields: [authorStudentId], references: [id])
  authorStudentId       String ?   @db.ObjectId

  authorTeacher         Teacher?   @relation(fields: [authorTeacherId], references: [id])
  authorTeacherId       String?    @db.ObjectId
   @@map("messages") 
}